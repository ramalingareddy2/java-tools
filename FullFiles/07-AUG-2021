How to write the test code in testing an application?
1. Should produce pass/fail
2. Initializing the test fixture
3. every test should be isolated from another test execution
4. there should be a way to compare the outcomes and report the exception in case of mis-match
5. need to have test reporting
6. test runner to execute test case methods of test classes
---------------------------------------------------------------------------------------------------------
JUnit 3
--------
  
JUnit3eg
|-src   
  |-com
    |-ju3
      |-bean
        |-Calculator.java        
|-testSrc (source directory)
  |-com
    |-ju3
      |-bean        
        |-CalculatorTest.java
|-bin
|-testBin


package com.ju3.bean;
class Calculator {  
  public int add(int a, int b) {    
    return a + b + x;
  }
}

package com.ju3.bean;
class CalculatorTest extends TestCase {
  int a;
  int b;
  int expectedPSum;
  Calculator calculator;
  int na;
  int nb;
  int exepctedNSum;
  
  public void setUp() {
    a = 10;
    b = 20;
    expectedPSum = 30;
    calculator = new Calculator();
    na = -10;
    nb = -20;
    expectedNSum = -30;
  }
  
  public void testAddWithPositiveNumbers() {
    int actualPSum = 0;
    
    actualPSum = calculator.add(a, b);
    Assert.assertEquals(expectedPSum,actualPSum);
  }
  
  public void testAddWithNegativeNumbers() {
    int actualNSum = 0;
    
    actualNSum = calculator.add(na, nb);
    Assert.assertEquals(expectedNSum, actualNSum);    
  }  
  
  public void tearDown() {
    calculator = null;
  }
}

JUnit 3 has provided a TestRunner called junit.textui.TestRunner, to him we need to pass fully qualified names of the Test case classes, so that it search for test methods and execute them along with setup() and teardown()


java -cp lib\hamcrest-core-1.3.jar;lib\junit-4.12.jar;lib\objenesis-2.1.jar;bin;testbin junit.textui.TestRunner com.mc.bean.CalculatorTest
--------------------------------------------------------------------------------------------------------
JUnit 4.x

JUnit 4 has added lot of new features
1. Replaced interface-driven programming model into annotation-based programming, finally our testcase classes are also pojo classes.
2. There is no mandatory rule that our test methods must and should start with word testXXX, to differentiate which methods are test methods from others junit4 has introduced annotation  
3. 
Test Execution lifecycle in Junit3
setup -> test execution -> teardown
The Test Execution lifecycle of JUnit 4 has been changed from JUnit 3
4. Parameterized Testcases are introduced to avoid code redundancy
5. Static imports are support for Assert classes
6. Timeout testing and Exception testing support has been added in JUnit4
7. JUnit4 has introduced new Test Runners that supports executing JUnit3 Testcases classes also and JUnit4 Testcase classes also together for backward compatibility


package com.ju4.bean;
class Calculator {
  int add(int a, int b) {
    return a + b;
  }
}

package com.ju4.bean;
import static org.junit.Assert.*;

class CalculatorTest {
  Calculator calculator;
  
  @Before
  public void init() {
    calculator = new Calculator();
  }
  
  @Test
  public void testAddWithPostiveNumbers() {
    int a = 10;
    int b = 20;
    int expectedSum = 30;
    int actualSum = 0;
    
    actualSum = calculator.add(a, b);
    assertEquals(expectedSum, actualSum);
  }
  
  @After
  public void end() {
    calculator = null;
  }
}

JUnit4 has provided a JUnitCore test runner that supports running JUnit3 Testcase classes and JUnit4 testcase class together and can produce the output.
java -cp ..\..\3.0\MathCal\lib\hamcrest-core-1.3.jar;..\..\3.0\MathCal\lib\junit-4.12.jar;..\..\3.0\MathCal\lib\objenesis-2.1.jar;target\classes;target\test-classes org.junit.runner.JUnitCore com.ju4.bean.CalculatorTest com.ju4.bean.WordGameTest
---------------------------------------------------------------------------------------------------------
The testlifecycle in JUnit4 has been changed when compared with JUnit3 there are 2 more additional lifecycle methods are added.
  @BeforeClass
  @AfterClass
  
@Before and @After are equal to setUp() and tearDown() of Junit3, which will be called before and after each test method execution. But we want to perform one time intialization and destruction before running any of the test methods are after completing all the test method execution, we cannot achieve in JUnit3

JUnit4 has introduced @BeforeClass and @AfterClass support 1 initialization and cleanup. We can write any 2 methods annotated with @BeforeClass and @AfterClass, the JUnit testrunner executes these 2 methods only once.
  
Before creating the object of the Testcase class the @BeforeClass method will be called, once the test executions are completed, then @AfterClass method will be called. As Test Runner calls these methods before instantiating the object of Test Case class, these methods should be static.
  
  
  
  
  
  
  
  
  
  
  
  

































































































